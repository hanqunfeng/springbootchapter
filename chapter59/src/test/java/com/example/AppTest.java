package com.example;

// Generated by Selenium IDE

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.openqa.selenium.*;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.firefox.FirefoxOptions;
import org.openqa.selenium.html5.LocalStorage;
import org.openqa.selenium.html5.SessionStorage;
import org.openqa.selenium.html5.WebStorage;
import org.openqa.selenium.remote.Augmenter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestTemplate;

import java.text.SimpleDateFormat;
import java.util.*;
import java.util.concurrent.TimeUnit;

@SpringBootTest
public class AppTest {
    private WebDriver driver;
    private Map<String, Object> vars;
    JavascriptExecutor js;

    @Autowired
    private RestTemplate restTemplate;


    @BeforeEach
    public void setUp() {
        //chrome
        //这里使用哪个浏览器就下载哪个驱动，一定要安装浏览器，否则不能正常启动
        //https://chromedriver.chromium.org/downloads
        //System.setProperty("webdriver.chrome.driver", "/Users/hanqf/idea_workspaces2/spider-code-repositories/selenium-test/webDriver/chromedriver");
        //ChromeOptions options = new ChromeOptions();
        //options.addArguments("--headless");//此处设置为隐藏浏览器窗口，静默模式，虽然可以不开起浏览器，但是也不能正常登录了
        //driver = new ChromeDriver(options);
        //driver = new ChromeDriver();

        //火狐
        //https://github.com/mozilla/geckodriver/releases
        System.setProperty("webdriver.gecko.driver", "/Users/hanqf/idea_workspaces2/spider-code-repositories/selenium-test/webDriver/geckodriver");
        // 可配置参数，此处设置为隐藏浏览器窗口，静默模式，火狐的好使，可以正常登录
        FirefoxOptions options = new FirefoxOptions();
        options.addArguments("--headless");
        //解决证书不可用的问题
        //options.addArguments("--ignore-certificate-errors");
        driver = new FirefoxDriver(options);
        //driver = new FirefoxDriver();


        js = (JavascriptExecutor) driver;
        vars = new HashMap<String, Object>();
    }

    @AfterEach
    public void tearDown() {
        driver.quit();
    }

    @Test
    public void loginTest() {

        //这个设置的意思是防止代码运行太快页面，找不到页面的元素。
        //因为selenium只是模拟人工操作，代码并不知页面是否在加载转圈中
        //此处设置的是当找不到元素时等待3秒，若网站速度很快是感受不到等待的哈
        driver.manage().timeouts().implicitlyWait(3, TimeUnit.SECONDS);
        driver.get("https://b.xxxx.com/login.jsp");
        driver.manage().window().setSize(new Dimension(1680, 1025));
        //driver.manage().window().setSize(new Dimension(0, 0)); //注释掉，或者设置为0，0，还是会打开窗口
        //driver.findElement(By.name("j_username")).click();
        driver.findElement(By.name("j_username")).sendKeys("xxxxxxx");
        driver.findElement(By.name("j_password")).sendKeys("xxxxxxx");
        driver.findElement(By.cssSelector("input:nth-child(5)")).click();

        //以上代码是通过浏览器插件自动生成

        System.out.println("当前页面url:" + driver.getCurrentUrl());
        // 如下是获取cookies的方法，一般老一点的网站会用cookie
        Set<Cookie> cookies = driver.manage().getCookies();
        // 现在很多网站都是vue,react等单页面应用。有些验证信息会存储在localstorage或sessionStorage中
        // 可以通过如下方法获取到
        WebStorage webStorage = (WebStorage) new Augmenter().augment(driver);
        SessionStorage sessionStorage = webStorage.getSessionStorage();// sessionStorage
        LocalStorage localStorage = webStorage.getLocalStorage(); // localstorage
        //System.out.println("获取到的token:");
        //System.out.println(localStorage.getItem("token"));
        // 当我们获取到了cookie或token等验证信息的时候
        // 其实通过Http发起post或get请求。很多时候不需要一个元素一个元素的抓取了。基本上就可以为所欲为了，哈哈哈


        //登录后访问某个页面
        driver.get("https://b.xxxx.com/auth/authority/list.do");
        //打印页面html内容
        System.out.println(driver.getPageSource());
        List<String> cookieList = new ArrayList<>();
        for (Cookie cookie : cookies) {
            System.out.println(cookie);
            cookieList.add(cookie.toString());

        }

        System.out.println(new SimpleDateFormat("EEE, dd MMM yyyy hh:mm:ss z")
                .format(new Date()));


    }

    /**
     * 这个可以正常访问登录后的页面
     */
    @Test
    public void test_gitlab() {
        driver.get("https://gitlab.zzzz.com/users/sign_in");
        driver.manage().window().setSize(new Dimension(1680, 1025));
        driver.findElement(By.id("user_login")).click();
        driver.findElement(By.id("user_login")).sendKeys("xxxxx");
        driver.findElement(By.id("user_password")).sendKeys("xxxxx");
        driver.findElement(By.name("commit")).click();


        System.out.println("当前页面url:" + driver.getCurrentUrl());
        // 如下是获取cookies的方法，一般老一点的网站会用cookie
        Set<Cookie> cookies = driver.manage().getCookies();
        List<String> cookieList = new ArrayList<>();
        for (Cookie cookie : cookies) {
            System.out.println(cookieToString(cookie));
            cookieList.add(cookieToString(cookie));
        }

        //driver.get("https://gitlab.androidsec.com");
        //System.out.println(driver.getPageSource());

        HttpHeaders headers = new HttpHeaders();
        headers.put(HttpHeaders.COOKIE, cookieList);
        // 设置请求boby
        HttpEntity entity = new HttpEntity(headers);

        String url = "https://gitlab.zzzz.com";
        ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.GET, entity, String.class);
        System.out.println("模拟浏览器请求接口，返回数据:" + response.getBody());


    }

    private String cookieToString(Cookie cookie) {
        return cookie.getName() + "=" + cookie.getValue()
                + (cookie.getExpiry() == null ? ""
                //Thu, 01-Jan-1970 00:00:10 GMT，这里重新toString主要是为了设置为英文格式
                : "; expires=" + new SimpleDateFormat("EEE, dd MMM yyyy hh:mm:ss", Locale.ENGLISH)
                .format(cookie.getExpiry()))
                + ("".equals(cookie.getPath()) ? "" : "; path=" + cookie.getPath())
                + (cookie.getDomain() == null ? "" : "; domain=" + cookie.getDomain())
                + (cookie.isSecure() ? ";secure;" : "");
    }
}

