server:
  port: 8080

spring:
  # 多个项目同时启动时，要修改这个端口，否则会因为端口冲突不能启动热部署，默认端口：35729
  devtools:
    livereload:
      port: 38002
  application:
    name: auth2-client-demo

  # 数据库配置
  datasource:
    # druid配置
    druid:
      #      driver-class-name: com.mysql.cj.jdbc.Driver
      #      url: jdbc:mysql://mysql.test.db:3306/mybatis?useUnicode=true&characterEncoding=utf-8
      driver-class-name: com.p6spy.engine.spy.P6SpyDriver
      url: jdbc:p6spy:mysql://mysql.test.db:3306/mybatis?useUnicode=true&characterEncoding=utf-8
      username: testUser
      password: 123456
      type: com.alibaba.druid.pool.DruidDataSource
      db-type: mysql
      filters: stat,wall,slf4j
      initial-size: 1
      max-active: 500
      max-pool-prepared-statement-per-connection-size: 20
      max-wait: 60000
      min-evictable-idle-time-millis: 300000
      min-idle: 1
      pool-prepared-statements: true
      test-on-borrow: false
      test-on-return: false
      test-while-idle: true
      time-between-eviction-runs-millis: 60000
      validation-query: SELECT 1 FROM DUAL

  # OAuth2 客户端配置
  security:
    oauth2:
      client:
        registration:
          github:
            client-id: fe35ae48b7c754af510f
            client-secret: xxxxxx
            client-name: Github Login
          google:
            client-id: 116430069637-35euocda196gv5566nqnqriqd33o9e16.apps.googleusercontent.com
            client-secret: GOCSPX-xxxxxx
            client-name: Google Login
          my-oauth2:
            provider: my-oauth2
            client-id: client
            client-secret: secret
            scope:
              - openid
              - user:info
            authorization-grant-type: authorization_code
            redirect-uri: http://127.0.0.1:8080/login/oauth2/code/my-oauth2
            clientName: my-oauth2
            clientAuthenticationMethod: client_secret_post

        provider:
          my-oauth2:
            # http://127.0.0.1:9090/.well-known/openid-configuration 浏览器访问这个地址就会获取下面所有的地址，所以如果服务端配置oidc，则只需要配置issuer-uri即可
            issuer-uri: http://localhost:9090
            # 认证服务地址
            # authorization-uri: http://localhost:9090/oauth2/authorize
            # 获取token地址
            # token-uri: http://localhost:9090/oauth2/token
            # 获取用户信息地址
            # user-info-uri: http://localhost:9090/userinfo
            # 用户名，在获取用户信息接口返回的json中的key
            # user-name-attribute: sub
            # 访问令牌是 JWT，并且颁发者为客户端提供端点以获取公共 RSA 密钥以进行 JWK 格式的验证
            # jwk-set-uri: http://localhost:9090/oauth2/jwks




