upstream casserver {
    server www.hanqunfeng.com:8443 weight=1;
    server www.hanqunfeng.com:8444 weight=1;
    # server www.hanqunfeng.com:8080;  # 如果代理到http，则下面代理协议也要是http

    #需要安装jvm_route模块，解决session共享问题，多个casserver时启用
    # server www.hanqunfeng.com:8443 srun_id=cas;
    # jvm_route $cookie_JSESSIONID|sessionid reverse;

    # 相同的ip被分配到同一个server上，其算法是用ip地址的前三段进行hash计算，所以同一个网段内的请求都会被分配到同一个server
    ip_hash;
}

# PEM 到 PKCS#12 的转换，即nginx证书转tomcat证书，命令执行后要求输入证书密码
# openssl pkcs12 -export -in www.hanqunfeng.com.pem -out www.hanqunfeng.com.pfx -inkey www.hanqunfeng.com.key

# PKCS#12 到 PEM 的转换,即tomcat证书转nginx证书，命令执行后要求输入证书密码pfx证书的密码
# openssl pkcs12 -clcerts -nokeys -in www.hanqunfeng.com.pfx -out www.hanqunfeng.com.pem
# openssl pkcs12 -in www.hanqunfeng.com.pfx -nocerts -nodes -out www.hanqunfeng.com.key
server {
    listen       443 ssl;
    server_name  www.hanqunfeng.com;
    ssl_certificate /usr/local/etc/nginx/cert/www.hanqunfeng.com.pem;   #将domain name.pem替换成您证书的文件名。
    ssl_certificate_key /usr/local/etc/nginx/cert/www.hanqunfeng.com.key;   #将domain name.key替换成您证书的密钥文件名。
    ssl_session_timeout 5m;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;
    location /cas/ {
        proxy_pass https://casserver/cas/;
        # proxy_pass http://casserver/cas/;  #对应上面的8080

        proxy_redirect off;
        proxy_set_header Host $host;
        proxy_set_header Referer $http_referer;
        proxy_set_header Cookie $http_cookie;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        # proxy_set_header X-FORWARDED-HOST $server_addr;  #会导致swagger中的地址显示为ip，而不是域名
        # proxy_set_header X-FORWARDED-PORT $server_port;
        proxy_connect_timeout 3;
        proxy_send_timeout 30;
        proxy_read_timeout 30;

        }
}

# http重定向到https
server{
   listen 80;
   server_name www.hanqunfeng.com;
   rewrite ^(.*)$  https://$host$1 permanent;
}

