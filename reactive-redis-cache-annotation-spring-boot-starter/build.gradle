
plugins {
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    //此处必须是java-library，如果是java则api方法不可用，api可以理解为就是compile，支持传递依赖
    id 'java-library'
    //发布插件
    id 'maven-publish'
    //签名插件
    id 'signing'
    //自动发布到maven中央仓库插件
    //https://github.com/Codearte/gradle-nexus-staging-plugin
    id 'io.codearte.nexus-staging' version '0.22.0'
}

group = 'com.hanqunfeng'
//version = '1.0.0-SNAPSHOT'
version = '1.0.4-fixed'
sourceCompatibility = '1.8'



java {
    withJavadocJar()
    withSourcesJar()
}

repositories {
    maven { url 'https://maven.aliyun.com/repository/public/' }
    mavenLocal()
    mavenCentral()
}

dependencyManagement {
    imports { mavenBom("org.springframework.boot:spring-boot-dependencies:2.4.0") }
}

dependencies {
    //lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    //如果不希望传递依赖，则使用implementation，传递依赖则使用compile或者api，gradle7后将不再支持compile
    //注解相关
    api 'org.springframework.boot:spring-boot-autoconfigure'
    api 'org.springframework.boot:spring-boot-configuration-processor'



    //json-jackson
    api 'com.fasterxml.jackson.core:jackson-databind'
    api 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8'
    api 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

    //@Aspect
    api 'org.aspectj:aspectjweaver'

    //Mono Flux
    api 'io.projectreactor:reactor-core'

    //redis-template
    api 'org.springframework.data:spring-data-redis'

}

test {
    useJUnitPlatform()
}

// java编译的时候缺省状态下会因为中文字符而失败
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'


/**
 * 发布插件
 * 参考：https://docs.gradle.org/6.6.1/userguide/publishing_maven.html#publishing_maven:resolved_dependencies
 *
 * 发布为bom，参考：https://zhuanlan.zhihu.com/p/195678201
 * 注意：java-platform不能与java和java-library同时存在
 */
publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = project.group
            artifactId = project.name
            version = project.version
            //如果不定义，则会按照以上默认值执行

            from components.java

            pom {
                name = 'redis-cache-annotation-reactive'
                description = 'redis cache function annotation for webflux'
                url = 'https://blog.hanqunfeng.com'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'hanqf'
                        name = 'han qunfeng'
                        email = 'qunfeng_han@126.com'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/hanqunfeng/reactive-redis-cache-annotation-spring-boot-starter.git'
                    developerConnection = 'scm:git:https://github.com:hanqunfeng/reactive-redis-cache-annotation-spring-boot-starter.git'
                    url = 'https://github.com/hanqunfeng/reactive-redis-cache-annotation-spring-boot-starter'
                }
            }

            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
        }
    }
    repositories {
        maven {
            // 发布仓库配置，这里基于version后缀是否为SNAPSHOT来区分发布到release库还是snapshots库
//            def releasesRepoUrl = "http://nexus.cxzh.ltd:8081/repository/maven-releases/"
//            def snapshotsRepoUrl = "http://nexus.cxzh.ltd:8081/repository/maven-snapshots/"

            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

            //认证用户和密码，在配置文件gradle.properties中配置
            credentials {
                username nexusUser
                password nexusPassword
            }
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

//javadoc，如果用jdk11，默认就支持中文
//查看可以配置的属性：https://docs.gradle.org/current/javadoc/org/gradle/external/javadoc/StandardJavadocDocletOptions.html
tasks.withType(Javadoc) {
    options.version = true
    options.author = true
    options.encoding = "UTF-8"
    options.charSet = "UTF-8"  //解决中文乱码
}


javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }

    if (JavaVersion.current().isJava8Compatible()) {
        tasks.withType(Javadoc) {
            // disable the crazy super-strict doclint tool in Java 8
            // noinspection SpellCheckingInspection
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

//签名，发布时会先执行签名
//参考：https://docs.gradle.org/current/userguide/signing_plugin.html
signing {
    sign publishing.publications.mavenJava
}

nexusStaging {
    username nexusUser
    password nexusPassword
    numberOfRetries 10
    delayBetweenRetriesInMillis 20000
    packageGroup = "com.hanqunfeng" //optional if packageGroup == project.getGroup()
//    stagingProfileId = "yourStagingProfileId" //when not defined will be got from server using "packageGroup"
}


