/**
 * gradle 自身需要资源定义
 * 构建脚本使用的依赖及查找仓库在此处声明，如插件或者task中需要使用的对象，等等
 */
buildscript {
	ext {
		springBootVersion = '2.3.4.RELEASE'
		springBootManagementVersion = '1.0.10.RELEASE'
		REPOSITORY_HOME = "https://maven.aliyun.com"
	}
	repositories {
		maven { url '${REPOSITORY_HOME}/repository/public/' }
		mavenLocal()
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("io.spring.gradle:dependency-management-plugin:${springBootManagementVersion}")
		classpath("com.github.shalousun:smart-doc-gradle-plugin:1.2.0")
	}
}


/**
 * 所有项目公共资源
 */
allprojects {
	apply plugin: 'java'
	apply plugin: 'idea'
	apply plugin: 'maven-publish'
	group = 'com.example'
	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8
}


/**
 * 子项目通用配置
 */
subprojects {
	apply plugin: 'org.springframework.boot'
	apply plugin: 'io.spring.dependency-management'
	apply plugin: 'smart-doc'

	smartdoc {
		//
		configFile = file("src/main/resources/smart-doc.json")
		// exclude artifact
//		exclude 'org.springframework.boot:xx'
//		exclude 'org.springframework.boot:ddd'
		// 你可以使用include配置来让插件自动加载指定依赖的source.
//		include 'org.springframework.boot:spring-boot-starter-tomcat'
	}

	// java编译的时候缺省状态下会因为中文字符而失败
	[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

	//仓库
	repositories {
		maven { url '${REPOSITORY_HOME}/repository/public/' }
		mavenLocal()
		mavenCentral()
	}

	dependencies {
		implementation 'org.springframework.boot:spring-boot-starter'
		compileOnly 'org.projectlombok:lombok'
		developmentOnly 'org.springframework.boot:spring-boot-devtools'
		annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
		annotationProcessor 'org.projectlombok:lombok'
		testImplementation('org.springframework.boot:spring-boot-starter-test') {
			exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
		}
	}

	dependencyManagement {
		imports { mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}") }
	}

	/**
	 * 发布插件
	 */
	publishing {
		publications {
			mavenJava(MavenPublication) {
				groupId = project.group
				artifactId = project.name
				version = project.version
				//如果不定义，则会按照以上默认值执行

				from components.java
				versionMapping {
					usage('java-api') {
						fromResolutionOf('runtimeClasspath')
					}
					usage('java-runtime') {
						fromResolutionResult()
					}
				}
			}
		}
		repositories {
			maven {
				// 发布仓库配置，这里基于version后缀是否为SNAPSHOT来区分发布到release库还是snapshots库
				def releasesRepoUrl = "http://nexus.cxzh.ltd:8081/repository/maven-releases/"
				def snapshotsRepoUrl = "http://nexus.cxzh.ltd:8081/repository/maven-snapshots/"
				url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

				//认证用户和密码，在配置文件gradle.properties中配置
				credentials {
					username nexusUser
					password nexusPassword
				}
			}
		}
	}

	configurations {
		[apiElements, runtimeElements].each {
			it.outgoing.artifacts.removeIf {
				it.buildDependencies.getDependencies(null).contains(jar)
			}
			it.outgoing.artifact(bootJar)
		}
	}

	tasks.withType(JavaCompile) {
		options.encoding = 'UTF-8'
	}

	test {
		useJUnitPlatform()
	}

	//javadoc，如果用jdk11，默认就支持中文
	//查看可以配置的属性：https://docs.gradle.org/current/javadoc/org/gradle/external/javadoc/StandardJavadocDocletOptions.html
	tasks.withType(Javadoc) {
		options.version = true
		options.author = true
		options.encoding = "UTF-8"
		options.charSet = "UTF-8"  //解决中文乱码
	}

	//功能同上
//	javadoc {
//		options {
//			encoding "UTF-8"
//			charSet "UTF-8"
//			author true
//			version true
//		}
//	}

	//自定义任务，依赖javadoc
	task hello{
		dependsOn javadoc
		println "hello world"
	}
}






//自动生成的配置
//plugins {
//	id 'org.springframework.boot' version '2.3.4.RELEASE'
//	id 'io.spring.dependency-management' version '1.0.10.RELEASE'
//	id 'java'
//}
//
//group = 'com.example'
//version = '0.0.1-SNAPSHOT'
//sourceCompatibility = '1.8'
//
//configurations {
//	compileOnly {
//		extendsFrom annotationProcessor
//	}
//}
//
//repositories {
//	mavenCentral()
//}
//
//dependencies {
//	implementation 'org.springframework.boot:spring-boot-starter-web'
//	compileOnly 'org.projectlombok:lombok'
//	developmentOnly 'org.springframework.boot:spring-boot-devtools'
//	annotationProcessor 'org.projectlombok:lombok'
//	testImplementation('org.springframework.boot:spring-boot-starter-test') {
//		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
//	}
//}
//
//test {
//	useJUnitPlatform()
//}
